{"version":3,"sources":["(2)checkProps.js","(3)ClassAndState.js","(4)ComponentLifeCycle.js","routes/About.js","components/(6)Movie.js","routes/Home.js","routes/Navigation.js","(5)Movies.js","index.js"],"names":["CheckProps","React","Component","About","Movie","year","title","summary","poster","genres","className","src","alt","map","index","key","slice","prototypes","id","protoTypes","number","isRequired","string","arrayOf","Home","state","isLoading","movies","getMovies","a","axios","get","data","setState","this","kind","medium_cover_image","Navigation","to","App","path","exact","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMAqDeA,I,kCChCUC,IAAMC,UCnBPD,IAAMC,U,cCMfC,MALf,WACI,OACA,+D,gECAJ,SAASC,EAAT,GAAuD,IAAtCC,EAAqC,EAArCA,KAAMC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,OAAOC,EAAQ,EAARA,OAC1C,OACA,yBAAKC,UAAU,SACX,yBAAKA,UAAU,cAAcC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IAC7D,wBAAII,UAAU,eAAeJ,GAC7B,wBAAII,UAAU,cAAcL,GAC5B,wBAAIK,UAAU,sBACTD,EAAOI,KAAI,SAACJ,EAAOK,GAAR,OACR,wBAAIC,IAAKD,EAAOJ,UAAU,eACrBD,OAKb,uBAAGC,UAAU,iBAAiBH,EAAQS,MAAM,EAAE,OAStDZ,EAAMa,WAAW,CACbC,GAAGC,IAAWC,OAAOC,WACrBhB,KAAKc,IAAWC,OAAOC,WACvBf,MAAMa,IAAWG,OAAOD,WACxBd,QAAQY,IAAWG,OAAOD,WAC1Bb,OAAOW,IAAWG,OAAOD,WACzBZ,OAAOU,IAAWI,QAAQJ,IAAWG,QAAQD,YAGlCjB,QCiCAoB,E,4MAjEXC,MAAM,CACFC,WAAU,EACVC,OAAO,I,EAGXC,U,sBAAW,8BAAAC,EAAA,sEACgCC,IAAMC,IAAI,4DAD1C,gBACcJ,EADd,EACAK,KAAOA,KAAOL,OAOtB,EAAKM,SAAS,CAACN,OAAOA,EAAQD,WAAU,IARhC,2C,kEAqBTQ,KAAKN,c,+BAKE,IAAD,EACuBM,KAAKT,MAAzBC,EADH,EACGA,UAAWC,EADd,EACcA,OAClB,OACC,6BACE,6BAASjB,UAAU,aACrBgB,EAEK,yBAAKhB,UAAU,UACb,0BAAMA,UAAU,gBAAhB,eAMF,yBAAKA,UAAU,UACdiB,EAAOd,KAAK,SAAAsB,GAAI,OAChB,kBAAC,EAAD,CACCpB,IAAKoB,EAAKjB,GACVA,GAAIiB,EAAKjB,GACTb,KAAM8B,EAAK9B,KACXC,MAAO6B,EAAK7B,MACZC,QAAS4B,EAAK5B,QACdC,OAAQ2B,EAAKC,mBACb3B,OAAQ0B,EAAK1B,mB,GAvDVR,IAAMC,WCMVmC,MARf,WACI,OACA,6BACI,kBAAC,IAAD,CAAMC,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,WCWOC,MAXf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAO,EAAMC,UAAWlB,IACxC,kBAAC,IAAD,CAAOgB,KAAK,SAASE,UAAWvC,MCHtCwC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.21d15a6c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport propTypes from \"prop-types\"\r\n\r\n\r\nconst foodLike=[\r\n    {\r\n    id:1,\r\n    name: \"ramen\",\r\n    image:\"https://file.mk.co.kr/meet/neds/2017/09/image_readtop_2017_587233_15042337473013492.jpg\",\r\n    rating:5.0\r\n    },\r\n    {\r\n      id:2,\r\n      name:\"kimbab\",\r\n      image:\"https://homecuisine.co.kr/files/attach/images/140/001/083/558d170258752df2dd76bef00861497f.JPG\",\r\n    rating:4.9\r\n    }\r\n  ];\r\n  \r\n//prop type이 잘못됐을때 알려주는 prop-types를 통해 알려준다.\r\n//내가 원하는 props인지 알려준다.\r\nfunction Food({ name, picture, rating } ){\r\n    return(\r\n      <div>my Favorite food is {name}\r\n      <br/>\r\n      And This is the Picure URL\r\n      <img src={picture} alt={name}/>\r\n      <br/>\r\n        <div>\r\n      this rating is {rating}/5.0\r\n        </div>\r\n      </div>\r\n      );\r\n  }\r\n  \r\nFood.propTypes ={ \r\n    name :propTypes.string.isRequired,\r\n    picture:propTypes.string.isRequired,\r\n    rating:propTypes.number.isRequired\r\n}\r\n\r\n//CheckProps() { return }  {}? in ES6\r\nfunction CheckProps(){\r\n  return(\r\n  <div>\r\n    {foodLike.map(food => (\r\n    <Food key={food.id} name={food.name} picture={food.image} rating={food.rating}/>\r\n    ))}\r\n    </div>\r\n    );\r\n}\r\n\r\n\r\nexport default CheckProps;","import React from \"react\";\r\n//import propsTypes from \"prop-types\";\r\n/*\r\nstate란 보통 우리가 동적 데이터와 함께 작업할 때 만들어진다,\r\n변하는 데이터, 존재하지 않는 데이터, 생겨나고 사라지고 또는 벼경된 데이터\r\n하나였던 데이터가 2개가 되고 -> dynamic data\r\n우리는 state가 필요하다.\r\nstate를 쓰려면 class component를 써야하지만\r\nHooks를 사용해야할때는 function component를 사용해야 한다.\r\n*/\r\n\r\n//function App(){return ( );} function component\r\n\r\n\r\n//react component이다. react 컴포넌트가 많은 것을 가지고있다.\r\n//그 중 하나가 state\r\n//모든 것을 구현하고 싶지는 않고 필요할때 extends를 한다.\r\n//애기 -> 사람 , cell phone -> 삼성\r\n//react 컴포넌트가 app의 정보를 가져옴\r\n//function이 아니기 때문에 render 메소드를 가진다.\r\n//extends를 했기 때문에 App에서도 render 메소드를 가진다.\r\nclass Checkstate extends React.Component{\r\n    state = {\r\n        count:0\r\n    };\r\n        //state는 object이다. 컴포넌트의 데이타를 넣을 공간이 있고 데이터는 변한다.\r\n        //하지만 Checkstate에서 데이터를 어떻게 바꿀것인가?\r\n    add = () => {\r\n        //this.setState({count:1})\r\n        this.setState({count:this.state.count+1})\r\n        //이렇게 쓰는걸 권장하지는 않는다. 하지만 react는 똑똑하기 때문에 안다.\r\n        //current를 사용하기를 \r\n    };\r\n    minus = () => {\r\n        this.setState(current => ({count:current.count-1}));\r\n    };\r\n    //state를 set할대 react에서 외부의 상태에 의존하지 않는 가장 좋은 방법\r\n    //setstate를 할때마다 react는 render를 다시 한다.\r\n    render(){\r\n        return (\r\n        <div>\r\n        <h1> Im a class component {this.state.count} </h1>\r\n        <button onClick={this.add}>Add</button>\r\n        <button onClick={this.minus}>Minus</button>\r\n        </div>\r\n        );\r\n        //this.add 는 onclick일때만 add()는 immediatly\r\n        //만약에 class 내에서 state의 상태를 변경하면 \r\n        //react는 render를 refresh 하지 않는다.\r\n        //따라서 render안에서 state를 변경해줘야 한다.\r\n    }\r\n}\r\nexport default Checkstate;\r\n//클래스 컴포넘트를 쓰는 이유는 state 때문이다. \r\n","import React from \"react\"\r\n\r\nclass LifeCycle extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        console.log(\"hello\");\r\n        //constructor란 자바에서 class를 생성할 때 만들어지는 것.\r\n        //자바스크립트이다. \r\n    }\r\n    state = {\r\n        count:0\r\n    };\r\n      \r\n    add = () => {\r\n \r\n        this.setState({count:this.state.count+1})\r\n       //이렇게 쓰는걸 권장하지는 않는다. 하지만 react는 똑똑하기 때문에 안다.\r\n        //current를 사용하기를 \r\n    };\r\n    minus = () => {\r\n        this.setState(current => ({count:current.count-1}));\r\n    };\r\n    componentDidMount(){\r\n        console.log(\"Component rendered\");\r\n    }\r\n    componentDidUpdate(){\r\n        console.log(\"I'm just updated\");\r\n    }\r\n//라이프 사이클 메소드란 ?\r\n//컴포넌트가 생성이 될때 렌더 되기전에 생성되는 것이 있다. \r\n//Mount, Update, Unmount 컴포넌트에 대한 콜들이 존재\r\n    render(){\r\n        console.log(\"I'm rendering\");\r\n        return (\r\n        <div>\r\n        <h1> Im a class component {this.state.count} </h1>\r\n        <button onClick={this.add}>Add</button>\r\n        <button onClick={this.minus}>Minus</button>\r\n        </div>\r\n        ); \r\n   \r\n    }\r\n}\r\nexport default LifeCycle;\r\n\r\n","import React from 'react';\r\n\r\n\r\nfunction About(){\r\n    return (\r\n    <span>About this Page: I built it </span>\r\n    );\r\n}\r\nexport default About;","import React from 'react'\r\nimport protoTypes from 'prop-types'\r\nimport './style.css'\r\n\r\n//state가 필요 없는 경우에는 class로 작성할 필요가 없다.\r\nfunction Movie({ year, title, summary, poster,genres}){\r\n    return (\r\n    <div className=\"movie\">\r\n        <img className=\"movie_image\" src={poster} alt={title} title={title}/>\r\n        <h3 className=\"movie_title\">{title}</h3>\r\n        <h5 className=\"movie_year\">{year}</h5>\r\n        <ul className=\"movie_genres_Array\">            \r\n            {genres.map((genres,index) =>(\r\n                <li key={index} className=\"movie_genre\">\r\n                    {genres}\r\n                </li>\r\n            )//넣을만한 key가 없지만 map에서 제공하는 index를 이용해서 넣을 수 있다.\r\n        ) }\r\n        </ul>\r\n        <p className=\"movie_summary\">{summary.slice(0,140)}</p>\r\n    \r\n    </div>\r\n    );\r\n}\r\n// pros {} 를 빼먹음....\r\n//map( kind => ()\r\n//자바스크립트에서의 for는 loop이다 따라서 htmlfor라고 써한다.\r\n\r\nMovie.prototypes={\r\n    id:protoTypes.number.isRequired,\r\n    year:protoTypes.number.isRequired,\r\n    title:protoTypes.string.isRequired,\r\n    summary:protoTypes.string.isRequired,\r\n    poster:protoTypes.string.isRequired,\r\n    genres:protoTypes.arrayOf(protoTypes.string).isRequired\r\n}\r\n\r\nexport default Movie;\r\n","import React from 'react';\r\nimport axios from 'axios';\r\nimport Movie from '../components/(6)Movie';\r\n\r\nclass Home extends React.Component{\r\n    state={\r\n        isLoading:true,\r\n        movies:[]\r\n    };\r\n\r\n    getMovies= async() => {\r\n        const {data: {data :{movies}}} = await axios.get(\"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\");\r\n        //console.log(movies);\r\n        //console.log(movies.data.data.movies)\r\n        //This is not sexy\r\n        //so we applying ES6 like that.\r\n       \r\n        //this.setState({movies:movies});\r\n       this.setState({movies:movies, isLoading:false})\r\n    }\r\n    //axios를 기다려야 된다는 것을 js에 알려준다.\r\n  componentDidMount(){\r\n    //   setTimeout(()=>{\r\n    //       this.setState({isLoading:false, book:true })\r\n    //   },6000)\r\n      //movies array에 book이 없더라도 오류는 나지 않는다.\r\n      //미래 지향적 state설정\r\n\r\n      //사람들이 자바스크립트에서 data를 fetch를 하는 방법은 FETch를 사용하는 것\r\n      //하지만 Axios라는 좋은 방법이 존재한다. \r\n      //Fetch위에 존재하는 작은 layer\r\n      this.getMovies();\r\n    }\r\n\r\n    //JSX 문법이므로 {} 안에 들어가야 한다. \r\n    //state변수 movies를 갖고옴으로 아래의 this.state.moveis => movies로 줄일 수 있다.\r\n    render(){\r\n        const {isLoading, movies }=this.state; //ES6\r\n        return (\r\n         <div>\r\n           <section className=\"container\">\r\n        {isLoading \r\n              ?\r\n              <div className=\"loader\">\r\n                <span className=\"loader__text\">\r\n                  Loading...\r\n                </span>\r\n              </div> \r\n              \r\n              :\r\n              <div className=\"movies\">\r\n              {movies.map( kind => \r\n               <Movie \r\n                key={kind.id}\r\n                id={kind.id} \r\n                year={kind.year} \r\n                title={kind.title} \r\n                summary={kind.summary} \r\n                poster={kind.medium_cover_image} \r\n                genres={kind.genres}\r\n                />\r\n              )}</div>//왜 {} 로 movie.map 부터 컴포넌트를 감싸야하나?  \r\n                    // () => ()\r\n        }  \r\n          </section>\r\n        </div>\r\n                );     \r\n    }\r\n  }\r\n                       \r\nexport default Home;\r\n        //\"Loading..\" :\"we are ready\" 부분을 바꾼다.\r\n/*\r\n        Destructuring Object\r\n        객체에서도 필요한 데이터만 뽑아서 변수로 할당할 수 있다.\r\n        \r\n            let obj = {\r\n              name: 'godori',\r\n              address: 'Guldari',\r\n              age: 17\r\n            }\r\n            \r\n            // 객체의 키 이름 값으로 새로운 변수 만들기\r\n            let {name, age} = obj;\r\n            \r\n            // 다른 변수 이름으로 객체의 값을 할당 받기\r\n            let {name:myName, age:myAge} = obj;\r\n            \r\n            console.log(name, age, myName, myAge); // godori, 17, godori, 17\r\n*/\r\n\r\n//setstate로 rendering을 해야만 비동기처리를 할 수 있다. \r\n\r\n//자바스크립트 클래스안에 있으면 컴포넌트 클래스에 의해 혼란스러워진다. 그래서 항상 className 으로 하는 것을 잊지 말자. ","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nfunction Navigation(){\r\n    return( \r\n    <div>\r\n        <Link to=\"/\">Home</Link>\r\n        <Link to=\"/about\">About</Link>\r\n    </div>\r\n    );\r\n}\r\nexport default Navigation;","import React from 'react';\r\nimport {HashRouter, Route} from \"react-router-dom\";\r\nimport About from \"./routes/About\";\r\nimport Home from './routes/Home';\r\nimport Navigation from './routes/Navigation'\r\n\r\nfunction App(){\r\n  return (\r\n    <HashRouter>\r\n      <Navigation/>\r\n      <Route path=\"/\" exact={true} component={Home} />\r\n      <Route path=\"/about\" component={About}/>\r\n    \r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './(1)propsEx';\nimport CheckProps from './(2)checkProps';\nimport Checkstate from './(3)ClassAndState';\nimport LifeCycle from './(4)ComponentLifeCycle';\nimport Movies from './(5)Movies';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Movies/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}